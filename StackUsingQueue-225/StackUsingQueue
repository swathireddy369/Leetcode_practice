import java.util.LinkedList;
import java.util.Queue;

class MyStack {
    Queue<Integer> que1;
    Queue<Integer> que2;
    public MyStack() {
        que1 = new LinkedList<Integer>();
        que2 = new LinkedList<Integer>();
    }
    public void push(int x) {
        que1.add(x);
    }
    public int pop() {
          if(que2.size () != 0){
            return que2.poll();
         }else{
         while(que1.size() > 0){
             que2.add(que1.poll());
             }
         while (que2.size() > 1) {
            que1.add(que2.poll());
        }
        return que2.poll();
         }
    }
    public int top() {
      if ( que2.size() != 0 && que1.size() == 1) {
            return que2.peek();
        } else {
            while(que1.size() > 0){
             que2.add(que1.poll());
             }
             while (que2.size() > 1) {
            que1.add(que2.poll());
           }
          return que2.peek();
         }
}

public boolean empty() {
    if (que1.isEmpty() && que2.isEmpty()) {
        return true;
    } else {
        return false;
    }
}
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */