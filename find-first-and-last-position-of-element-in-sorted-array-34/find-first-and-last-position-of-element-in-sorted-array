class Solution {
     public static int binarySearch1(int[] nums,int target,int low,int high){
     while(low <= high){
            int mid= low+(high-low)/2;
           if(nums[mid] == target){
                 if(mid == 0 || nums[mid] != nums[mid-1]){
                     return mid;  
                } else{
                           high=mid-1;
                }
            } else if(nums[mid] > target){
              high =mid-1;
              
            }else{
              low=mid+1; 
            }
        }
        return -1;
        }
        public int binarySearch2(int[] nums,int target,int low,int high){
        System.out.println("===o="+low+" "+high+" ");
      
          while(low <= high){
            int mid= low+(high-low)/2;
            if(nums[mid] == target){
                if(mid == nums.length-1 || nums[mid] != nums[mid+1]){
                   return mid;  
                } else{
                          low=mid+1;
                }
            } else if(nums[mid] > target){
              high =mid-1;
              
            }else{
              low=mid+1; 
            }
        }
          return -1;
        }
      public int[] searchRange(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        int[] a1=new int[]{-1,-1};
        int firstIdx= binarySearch1(nums,target,low, high);
        if(firstIdx == -1){
            return a1;
          }
         int secondIdx= binarySearch2( nums,target,firstIdx, high);
          a1[0]=firstIdx;
            a1[1]=secondIdx;
         return a1;
    }
        
    }
